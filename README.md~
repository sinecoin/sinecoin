Sinecoin integration/staging tree
================================

Copyright (c) 2009-2013 Bitcoin Developers
Copyright (c) 2011-2013 Litecoin Developers
Copyright (c) 2014 Sinecoin Developers

What is Sinecoin?
----------------

Sinecoin is a cryptocurrency using scrypt-adaptive-N as a proof-of-work algorithm. Block rewards vary along a sine wave, which ensures that even as the base block reward gets lower, it will still be worthwhile to mine.

Specifications: 

 - 5 minute block targets
 - block reward halves every 315k blocks (~3 years)
 - ~100 million total coins
 - 100 coins per block, varying according to a sine function
 - Difficulty retargets every block with Kimotos Gravity Well algorithm

There is a small premine, roughly ~0.99%, to fund development/promotion.
 
Ports:

 - RPC: 32713
 - P2P: 32714


sinecoin.conf:

    addnode=192.168.1.108


License
-------

Sinecoin is released under the terms of the MIT license. See `COPYING` for more
information or see http://opensource.org/licenses/MIT.

Development process
-------------------

Developers work in their own trees, then submit pull requests when they think
their feature or bug fix is ready.

If it is a simple/trivial/non-controversial change, then one of the Sinecoin
development team members simply pulls it.

If it is a *more complicated or potentially controversial* change, then the patch
submitter will be asked to start a discussion (if they haven't already) on the
[mailing list](http://sourceforge.net/mailarchive/forum.php?forum_name=bitcoin-development).

The patch will be accepted if there is broad consensus that it is a good thing.
Developers should expect to rework and resubmit patches if the code doesn't
match the project's coding conventions (see `doc/coding.txt`) or are
controversial.

The `master` branch is regularly built and tested, but is not guaranteed to be
completely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created
regularly to indicate new official, stable release versions of Sinecoin.

Testing
-------

Testing and code review is the bottleneck for development; we get more pull
requests than we can review and test. Please be patient and help out, and
remember this is a security-critical project where any mistake might cost people
lots of money.

### Automated Testing

Developers are strongly encouraged to write unit tests for new code, and to
submit new unit tests for old code.

Unit tests for the core code are in `src/test/`. To compile and run them:

    cd src; make -f makefile.unix test

Unit tests for the GUI code are in `src/qt/test/`. To compile and run them:

    qmake BITCOIN_QT_TEST=1 -o Makefile.test bitcoin-qt.pro
    make -f Makefile.test
    ./sinecoin-qt_test

